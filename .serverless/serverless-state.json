{
  "service": {
    "service": "rushupwebsite",
    "serviceObject": {
      "name": "rushupwebsite"
    },
    "provider": {
      "stage": "prod",
      "region": "eu-west-1",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._'\",\\-\\/\\(\\)]+?)}",
      "name": "aws",
      "runtime": "python2.7",
      "profile": "zeroandonedev",
      "memorySize": 512,
      "timeout": 12,
      "environment": {
        "identityPoolId": "eu-west-1:8c5f7308-824b-4e91-897c-342247e5a22f",
        "locationDatasetName": "Locations",
        "deliveryTimeoutStep": "arn:aws:states:eu-west-1:261650959426:stateMachine:delivery_timeout",
        "driverAssignState": "arn:aws:states:eu-west-1:261650959426:stateMachine:driver_assign",
        "deliveryTimeout": "60",
        "driverMinLookupRadius": "5",
        "driverMaxLookupRadius": "40",
        "androidPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up",
        "androidDriverPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up_driver",
        "iosPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/APNS_SANDBOX/rush_up_ios_dev"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            "arn:aws:dynamodb:eu-west-1:261650959426:table/user_token",
            "arn:aws:dynamodb:eu-west-1:261650959426:table/delivery",
            "arn:aws:dynamodb:eu-west-1:261650959426:table/driver_token",
            "arn:aws:dynamodb:eu-west-1:261650959426:table/delivery_drivers",
            "arn:aws:dynamodb:eu-west-1:261650959426:table/driver_code",
            "arn:aws:dynamodb:eu-west-1:261650959426:table/delivery/index/identity_id-delivery_date-index",
            "arn:aws:dynamodb:eu-west-1:261650959426:table/delivery/index/driver_id-delivery_date-index",
            "arn:aws:dynamodb:eu-west-1:261650959426:table/driver_token/index/username-index"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:SetEndpointAttributes",
            "sns:GetEndpointAttributes",
            "sns:CreatePlatformEndpoint"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:publish"
          ],
          "Resource": [
            "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up",
            "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up_driver",
            "arn:aws:sns:eu-west-1:261650959426:app/APNS_SANDBOX/rush_up_ios_dev"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cognito-idp:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cognito-sync:ListRecords"
          ],
          "Resource": "arn:aws:cognito-sync:*:*:identitypool/*/identity/*/dataset/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "states:StartExecution"
          ],
          "Resource": [
            "arn:aws:states:eu-west-1:261650959426:stateMachine:delivery_timeout",
            "arn:aws:states:eu-west-1:261650959426:stateMachine:driver_assign"
          ]
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket"
          },
          "CreateGroupLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rushupwebsite-prod-createGroup"
            }
          },
          "CheckIfCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rushupwebsite-prod-CheckIfCompany"
            }
          },
          "AssignUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rushupwebsite-prod-AssignUser"
            }
          },
          "DeleteUserFromGroupLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rushupwebsite-prod-DeleteUserFromGroup"
            }
          },
          "GetAllUsersCognitoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rushupwebsite-prod-GetAllUsersCognito"
            }
          },
          "CreateDriverRegistrationCodeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rushupwebsite-prod-createDriverRegistrationCode"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "prod",
                        "rushupwebsite",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rushupwebsite-prod-createGroup:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rushupwebsite-prod-CheckIfCompany:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rushupwebsite-prod-AssignUser:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rushupwebsite-prod-DeleteUserFromGroup:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rushupwebsite-prod-GetAllUsersCognito:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rushupwebsite-prod-createDriverRegistrationCode:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rushupwebsite-prod-createGroup:*:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rushupwebsite-prod-CheckIfCompany:*:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rushupwebsite-prod-AssignUser:*:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rushupwebsite-prod-DeleteUserFromGroup:*:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rushupwebsite-prod-GetAllUsersCognito:*:*"
                          },
                          {
                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rushupwebsite-prod-createDriverRegistrationCode:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][3]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][4]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][5]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "rushupwebsite",
                    "prod",
                    "eu-west-1",
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateGroupLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rushupwebsite/prod/1524173145293-2018-04-19T21:25:45.293Z/rushupwebsite.zip"
              },
              "FunctionName": "rushupwebsite-prod-createGroup",
              "Handler": "group.create_group",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python2.7",
              "Timeout": 12,
              "Environment": {
                "Variables": {
                  "identityPoolId": "eu-west-1:8c5f7308-824b-4e91-897c-342247e5a22f",
                  "locationDatasetName": "Locations",
                  "deliveryTimeoutStep": "arn:aws:states:eu-west-1:261650959426:stateMachine:delivery_timeout",
                  "driverAssignState": "arn:aws:states:eu-west-1:261650959426:stateMachine:driver_assign",
                  "deliveryTimeout": "60",
                  "driverMinLookupRadius": "5",
                  "driverMaxLookupRadius": "40",
                  "androidPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up",
                  "androidDriverPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up_driver",
                  "iosPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/APNS_SANDBOX/rush_up_ios_dev"
                }
              }
            },
            "DependsOn": [
              "CreateGroupLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateGroupLambdaVersionjNEthIsh5fNoicWPZq59Q1uO1SurGyEkgIWcc5ugPM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateGroupLambdaFunction"
              },
              "CodeSha256": "3GBS/vpqeB00c0cYkWLjPep7Sdil53RKymcp3nS2utg="
            }
          },
          "CheckIfCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rushupwebsite/prod/1524173145293-2018-04-19T21:25:45.293Z/rushupwebsite.zip"
              },
              "FunctionName": "rushupwebsite-prod-CheckIfCompany",
              "Handler": "group.check_if_company",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python2.7",
              "Timeout": 12,
              "Environment": {
                "Variables": {
                  "identityPoolId": "eu-west-1:8c5f7308-824b-4e91-897c-342247e5a22f",
                  "locationDatasetName": "Locations",
                  "deliveryTimeoutStep": "arn:aws:states:eu-west-1:261650959426:stateMachine:delivery_timeout",
                  "driverAssignState": "arn:aws:states:eu-west-1:261650959426:stateMachine:driver_assign",
                  "deliveryTimeout": "60",
                  "driverMinLookupRadius": "5",
                  "driverMaxLookupRadius": "40",
                  "androidPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up",
                  "androidDriverPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up_driver",
                  "iosPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/APNS_SANDBOX/rush_up_ios_dev"
                }
              }
            },
            "DependsOn": [
              "CheckIfCompanyLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CheckIfCompanyLambdaVersiondFODSmj9fimoREIRQRWSdHVXntMT7ZSgjmlTF8rc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CheckIfCompanyLambdaFunction"
              },
              "CodeSha256": "3GBS/vpqeB00c0cYkWLjPep7Sdil53RKymcp3nS2utg="
            }
          },
          "AssignUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rushupwebsite/prod/1524173145293-2018-04-19T21:25:45.293Z/rushupwebsite.zip"
              },
              "FunctionName": "rushupwebsite-prod-AssignUser",
              "Handler": "group.assign_user",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python2.7",
              "Timeout": 12,
              "Environment": {
                "Variables": {
                  "identityPoolId": "eu-west-1:8c5f7308-824b-4e91-897c-342247e5a22f",
                  "locationDatasetName": "Locations",
                  "deliveryTimeoutStep": "arn:aws:states:eu-west-1:261650959426:stateMachine:delivery_timeout",
                  "driverAssignState": "arn:aws:states:eu-west-1:261650959426:stateMachine:driver_assign",
                  "deliveryTimeout": "60",
                  "driverMinLookupRadius": "5",
                  "driverMaxLookupRadius": "40",
                  "androidPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up",
                  "androidDriverPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up_driver",
                  "iosPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/APNS_SANDBOX/rush_up_ios_dev"
                }
              }
            },
            "DependsOn": [
              "AssignUserLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AssignUserLambdaVersionMj4kYihw9b5siidVX7K9hKgDsJFreB2vrCcpcxadg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AssignUserLambdaFunction"
              },
              "CodeSha256": "3GBS/vpqeB00c0cYkWLjPep7Sdil53RKymcp3nS2utg="
            }
          },
          "DeleteUserFromGroupLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rushupwebsite/prod/1524173145293-2018-04-19T21:25:45.293Z/rushupwebsite.zip"
              },
              "FunctionName": "rushupwebsite-prod-DeleteUserFromGroup",
              "Handler": "group.delete_user",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python2.7",
              "Timeout": 12,
              "Environment": {
                "Variables": {
                  "identityPoolId": "eu-west-1:8c5f7308-824b-4e91-897c-342247e5a22f",
                  "locationDatasetName": "Locations",
                  "deliveryTimeoutStep": "arn:aws:states:eu-west-1:261650959426:stateMachine:delivery_timeout",
                  "driverAssignState": "arn:aws:states:eu-west-1:261650959426:stateMachine:driver_assign",
                  "deliveryTimeout": "60",
                  "driverMinLookupRadius": "5",
                  "driverMaxLookupRadius": "40",
                  "androidPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up",
                  "androidDriverPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up_driver",
                  "iosPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/APNS_SANDBOX/rush_up_ios_dev"
                }
              }
            },
            "DependsOn": [
              "DeleteUserFromGroupLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "DeleteUserFromGroupLambdaVersion2fji0OuKpPGkipKUKSGW01EdkQlobqtYebCigTf7Ig": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserFromGroupLambdaFunction"
              },
              "CodeSha256": "3GBS/vpqeB00c0cYkWLjPep7Sdil53RKymcp3nS2utg="
            }
          },
          "GetAllUsersCognitoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rushupwebsite/prod/1524173145293-2018-04-19T21:25:45.293Z/rushupwebsite.zip"
              },
              "FunctionName": "rushupwebsite-prod-GetAllUsersCognito",
              "Handler": "group.get_all_users_in_group_cognito",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python2.7",
              "Timeout": 12,
              "Environment": {
                "Variables": {
                  "identityPoolId": "eu-west-1:8c5f7308-824b-4e91-897c-342247e5a22f",
                  "locationDatasetName": "Locations",
                  "deliveryTimeoutStep": "arn:aws:states:eu-west-1:261650959426:stateMachine:delivery_timeout",
                  "driverAssignState": "arn:aws:states:eu-west-1:261650959426:stateMachine:driver_assign",
                  "deliveryTimeout": "60",
                  "driverMinLookupRadius": "5",
                  "driverMaxLookupRadius": "40",
                  "androidPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up",
                  "androidDriverPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up_driver",
                  "iosPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/APNS_SANDBOX/rush_up_ios_dev"
                }
              }
            },
            "DependsOn": [
              "GetAllUsersCognitoLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetAllUsersCognitoLambdaVersioni2gquAZURGfYv5JUBMD7e8kgE4Q4D6OxZgFvtQYefk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllUsersCognitoLambdaFunction"
              },
              "CodeSha256": "3GBS/vpqeB00c0cYkWLjPep7Sdil53RKymcp3nS2utg="
            }
          },
          "CreateDriverRegistrationCodeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rushupwebsite/prod/1524173145293-2018-04-19T21:25:45.293Z/rushupwebsite.zip"
              },
              "FunctionName": "rushupwebsite-prod-createDriverRegistrationCode",
              "Handler": "driver.save_registration_code",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python2.7",
              "Timeout": 12,
              "Environment": {
                "Variables": {
                  "identityPoolId": "eu-west-1:8c5f7308-824b-4e91-897c-342247e5a22f",
                  "locationDatasetName": "Locations",
                  "deliveryTimeoutStep": "arn:aws:states:eu-west-1:261650959426:stateMachine:delivery_timeout",
                  "driverAssignState": "arn:aws:states:eu-west-1:261650959426:stateMachine:driver_assign",
                  "deliveryTimeout": "60",
                  "driverMinLookupRadius": "5",
                  "driverMaxLookupRadius": "40",
                  "androidPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up",
                  "androidDriverPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up_driver",
                  "iosPlatformApplicationArn": "arn:aws:sns:eu-west-1:261650959426:app/APNS_SANDBOX/rush_up_ios_dev"
                }
              }
            },
            "DependsOn": [
              "CreateDriverRegistrationCodeLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateDriverRegistrationCodeLambdaVersionQ9vYD8OuH9y8qNYJNfqJeaCfm3Pv7v4m3wglJpF7co": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDriverRegistrationCodeLambdaFunction"
              },
              "CodeSha256": "3GBS/vpqeB00c0cYkWLjPep7Sdil53RKymcp3nS2utg="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "prod-rushupwebsite",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceGroup": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "group",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGroupAssign": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceGroup"
              },
              "PathPart": "assign",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGroupDelete": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceGroup"
              },
              "PathPart": "delete",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGroupUserscognito": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceGroup"
              },
              "PathPart": "userscognito",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCheck": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "check",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCreatecode": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "createcode",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCheckOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCheck"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGroupAssignOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGroupAssign"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGroupDeleteOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGroupDelete"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGroupUserscognitoOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGroupUserscognito"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCreatecodeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCreatecode"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGroupGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGroup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateGroupLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodCheckGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCheck"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "1Underscorew2rC3VeKIApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CheckIfCompanyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "1Underscorew2rC3VeKIApiGatewayAuthorizer"
          },
          "ApiGatewayMethodGroupAssignPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGroupAssign"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "1Underscorew2rC3VeKIApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AssignUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "1Underscorew2rC3VeKIApiGatewayAuthorizer"
          },
          "ApiGatewayMethodGroupDeletePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGroupDelete"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "1Underscorew2rC3VeKIApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteUserFromGroupLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "1Underscorew2rC3VeKIApiGatewayAuthorizer"
          },
          "ApiGatewayMethodGroupUserscognitoGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGroupUserscognito"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "1Underscorew2rC3VeKIApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllUsersCognitoLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "1Underscorew2rC3VeKIApiGatewayAuthorizer"
          },
          "ApiGatewayMethodCreatecodePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCreatecode"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "1Underscorew2rC3VeKIApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateDriverRegistrationCodeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "1Underscorew2rC3VeKIApiGatewayAuthorizer"
          },
          "1Underscorew2rC3VeKIApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "IdentitySource": "method.request.header.Authorization",
              "Name": "1_w2rC3VeKI",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Type": "COGNITO_USER_POOLS",
              "ProviderARNs": [
                "arn:aws:cognito-idp:eu-west-1:261650959426:userpool/eu-west-1_w2rC3VeKI"
              ]
            }
          },
          "ApiGatewayDeployment1524173145322": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "prod"
            },
            "DependsOn": [
              "ApiGatewayMethodGroupGet",
              "ApiGatewayMethodCheckGet",
              "ApiGatewayMethodGroupAssignPost",
              "ApiGatewayMethodGroupDeletePost",
              "ApiGatewayMethodGroupUserscognitoGet",
              "ApiGatewayMethodCreatecodePost"
            ]
          },
          "CreateGroupLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateGroupLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CheckIfCompanyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CheckIfCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AssignUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AssignUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteUserFromGroupLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserFromGroupLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllUsersCognitoLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllUsersCognitoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateDriverRegistrationCodeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDriverRegistrationCodeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "CreateGroupLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateGroupLambdaVersionjNEthIsh5fNoicWPZq59Q1uO1SurGyEkgIWcc5ugPM"
            }
          },
          "CheckIfCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CheckIfCompanyLambdaVersiondFODSmj9fimoREIRQRWSdHVXntMT7ZSgjmlTF8rc"
            }
          },
          "AssignUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AssignUserLambdaVersionMj4kYihw9b5siidVX7K9hKgDsJFreB2vrCcpcxadg"
            }
          },
          "DeleteUserFromGroupLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserFromGroupLambdaVersion2fji0OuKpPGkipKUKSGW01EdkQlobqtYebCigTf7Ig"
            }
          },
          "GetAllUsersCognitoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllUsersCognitoLambdaVersioni2gquAZURGfYv5JUBMD7e8kgE4Q4D6OxZgFvtQYefk"
            }
          },
          "CreateDriverRegistrationCodeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDriverRegistrationCodeLambdaVersionQ9vYD8OuH9y8qNYJNfqJeaCfm3Pv7v4m3wglJpF7co"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.eu-west-1.amazonaws.com/prod"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "defaultStage": "prod",
      "profiles": {
        "dev": "zeroandonedev",
        "prod": "zeroandonedev"
      },
      "restApiRootResourceId": {
        "dev": "/dev",
        "prod": "/"
      },
      "models": [
        {
          "name": "Type",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "message": null,
              "type": "string"
            }
          }
        },
        {
          "name": "Users",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "username_phone_email": "string"
              }
            }
          }
        },
        {
          "name": "UserAssign",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "email": "string",
              "groupname": "string"
            }
          }
        }
      ],
      "documentation": {
        "models": [
          {
            "name": "Group",
            "contentType": "application/json",
            "schema": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "title": "Group",
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "group_name": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "plugins": [
      "serverless-aws-documentation"
    ],
    "functions": {
      "createGroup": {
        "handler": "group.create_group",
        "events": [
          {
            "http": {
              "path": "group",
              "method": "get",
              "authorizer": {
                "type": "AWS_IAM",
                "identitySource": "method.request.header.Authorization"
              },
              "documentation": {
                "summary": "Create Company Group",
                "description": "create group for company"
              },
              "methodResponses": [
                {
                  "statusCode": "200"
                }
              ],
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rushupwebsite-prod-createGroup",
        "package": {},
        "vpc": {}
      },
      "CheckIfCompany": {
        "handler": "group.check_if_company",
        "events": [
          {
            "http": {
              "path": "check",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "1_w2rC3VeKI",
                "arn": "arn:aws:cognito-idp:eu-west-1:261650959426:userpool/eu-west-1_w2rC3VeKI",
                "identitySource": "method.request.header.Authorization"
              },
              "documentation": {
                "summary": "Check if Company",
                "description": "check if company"
              },
              "methodResponses": [
                {
                  "statusCode": "200",
                  "responseModels": {
                    "application/json": "Type"
                  }
                }
              ],
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rushupwebsite-prod-CheckIfCompany",
        "package": {},
        "vpc": {}
      },
      "AssignUser": {
        "handler": "group.assign_user",
        "events": [
          {
            "http": {
              "path": "group/assign",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "1_w2rC3VeKI",
                "arn": "arn:aws:cognito-idp:eu-west-1:261650959426:userpool/eu-west-1_w2rC3VeKI",
                "identitySource": "method.request.header.Authorization"
              },
              "documentation": {
                "summary": "Assign User To Group",
                "description": "assign user to group",
                "requestModels": {
                  "application/json": "Group"
                }
              },
              "methodResponses": [
                {
                  "statusCode": "200"
                }
              ],
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rushupwebsite-prod-AssignUser",
        "package": {},
        "vpc": {}
      },
      "DeleteUserFromGroup": {
        "handler": "group.delete_user",
        "events": [
          {
            "http": {
              "path": "group/delete",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "1_w2rC3VeKI",
                "arn": "arn:aws:cognito-idp:eu-west-1:261650959426:userpool/eu-west-1_w2rC3VeKI",
                "identitySource": "method.request.header.Authorization"
              },
              "documentation": {
                "summary": "Delete User From Group",
                "description": "delete user from group",
                "requestModels": {
                  "application/json": "Group"
                }
              },
              "methodResponses": [
                {
                  "statusCode": "200"
                }
              ],
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rushupwebsite-prod-DeleteUserFromGroup",
        "package": {},
        "vpc": {}
      },
      "GetAllUsersCognito": {
        "handler": "group.get_all_users_in_group_cognito",
        "events": [
          {
            "http": {
              "path": "group/userscognito",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "1_w2rC3VeKI",
                "arn": "arn:aws:cognito-idp:eu-west-1:261650959426:userpool/eu-west-1_w2rC3VeKI",
                "identitySource": "method.request.header.Authorization"
              },
              "documentation": {
                "summary": " Get users for a group in website",
                "description": "get users for a group in website"
              },
              "methodResponses": [
                {
                  "statusCode": "200",
                  "responseModel": "Users"
                }
              ],
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rushupwebsite-prod-GetAllUsersCognito",
        "package": {},
        "vpc": {}
      },
      "createDriverRegistrationCode": {
        "handler": "driver.save_registration_code",
        "events": [
          {
            "http": {
              "path": "createcode",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "1_w2rC3VeKI",
                "arn": "arn:aws:cognito-idp:eu-west-1:261650959426:userpool/eu-west-1_w2rC3VeKI",
                "identitySource": "method.request.header.Authorization"
              },
              "documentation": {
                "summary": "create driver registration code",
                "description": "create driver registration code"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rushupwebsite-prod-createDriverRegistrationCode",
        "package": {},
        "vpc": {}
      }
    },
    "artifact": "C:\\Users\\nancy\\IdeaProjects\\rushup_company\\.serverless\\rushupwebsite.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/rushupwebsite/prod/1524173145293-2018-04-19T21:25:45.293Z",
    "artifact": "rushupwebsite.zip"
  }
}